import com.google.common.collect.HashMultiset;
import org.apache.jena.query.*;
import org.apache.jena.rdf.model.*;
import org.apache.jena.tdb.TDBFactory;
import org.apache.jena.tdb.base.file.Location;
import com.google.common.collect.Multiset;
import java.util.*;


/**
 * Created by clair on 12/5/2016.
 */
public class ReadTransaction {
    private static ReadTransaction transaction;
    private Location location;
    private Dataset dataset;
    private Model model;
    private ArrayList<String> conferenceArray;

    private final String prefixDC = "PREFIX dc: <http://purl.org/dc/elements/1.1/>";
    private final String prefixSWRC = "PREFIX swrc: <http://swrc.ontoware.org/ontology#>";
    private final String prefixRDFS = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>";
    private final String prefixPURL = "PREFIX purl: <http://purl.org/dc/terms/>";
    private final String prefixPURLElem = "PREFIX purlelem: <http://purl.org/dc/elements/1.1/>";
    private final String prefixXSD = "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>";
    private final String prefixRDF = "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>";

    public TreeMap<String, Integer> map_year_numOfinPro;
    public ArrayList<String> years;

    public ReadTransaction() {
        location = Location.create("F:\\3rd_Project\\FacetedDBLP\\Jena\\target\\DBLP_NEW");
        dataset = TDBFactory.createDataset(location);
    }


    public void startTranscation() {
        dataset.begin(ReadWrite.READ); // changed from READ to WRITE
        model = dataset.getDefaultModel();
    }

    public void close() {
        if (dataset != null) {
            dataset.close();
        }
    }

    public void executeProceedingQuery(String proceeding, String yearsDuration) throws Exception {
        map_year_numOfinPro = new TreeMap<String, Integer>();

        //String[] years = new String[]{"2008","2009","2010","2011","2012","2013","2014","2015","2016"};
        years = new ArrayList<String>();
        String[] temp = yearsDuration.split("-");

        for (int year = Integer.parseInt(temp[0]); year <= Integer.parseInt(temp[1]); year++) {
            String temYear = Integer.toString(year);
            System.out.println("temYear=========" + temYear);
            years.add(temYear);

            // SparqlQuery
            String proceedingQuery = prefixDC + prefixSWRC + prefixRDFS + prefixPURL + prefixXSD +
                    "SELECT ?inproceeding ?conf WHERE{" +
                    "?inproceeding  a swrc:InProceedings; swrc:series ?conf; purl:issued \"" + temYear + "\"^^xsd:gYear ." +
                    "?conf rdfs:label \"" + proceeding + "\".}";

            Query query = QueryFactory.create(proceedingQuery);
            QueryExecution qexec = QueryExecutionFactory.create(query, model);
            try {

                ResultSet results = qexec.execSelect();
                Vector<String> resultsVec = new Vector<String>();
                while (results.hasNext()) {
                    QuerySolution soln = results.nextSolution();
                    String inproceeding = soln.get("inproceeding").toString();
                    resultsVec.add(inproceeding);
                }
                map_year_numOfinPro.put(temYear, resultsVec.size());

                System.out.println("The size of the result is:" + resultsVec.size());

            } finally {
                qexec.close();
            }
        }
        dataset.end();
        System.out.println("Start to generate the graph");
//        BarChart_AWT chart = new BarChart_AWT("Conferences Statistics", proceeding + " Conference Statistics", map_year_numOfinPro, years);
//        chart.pack();
//        chart.setVisible(true);
    }
}


